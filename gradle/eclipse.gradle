import org.gradle.plugins.ide.eclipse.model.Facet
import org.gradle.plugins.ide.eclipse.model.Facet.FacetType
import org.gradle.plugins.ide.eclipse.model.SourceFolder
import org.gradle.plugins.ide.eclipse.model.WbResource

allprojects {

	// eclipse
	apply plugin: "eclipse"

	plugins.withType(JavaPlugin) {
		eclipse {
			classpath {
				defaultOutputDir = file("bin/main")
				file.whenMerged { cp ->
					// seperate output for main & test sources
					cp.entries.findAll { it instanceof SourceFolder && it.path == "build/src-gen" }*.output = "bin/main"
					cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "bin/main"
					cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test"

					// remove self-dependency
					cp.entries.removeAll { it.path.contains("$project.name") && it.kind == 'src' }
					cp.entries.removeAll { it.path.contains("$project.name/build") && it.kind == 'lib' }
				}
			}
		}
	}
}

def WTP_IGNORE = ['axelor-shell', 'axelor-gradle', 'axelor-test']

subprojects {

	if (WTP_IGNORE.contains(project.name)) {
		return
	}

	apply plugin: "eclipse-wtp"

	task forceWtpComponent(type: GenerateEclipseWtpComponent) {
		inputFile = project.file('.settings/org.eclipse.wst.common.component')
		outputFile = project.file('.settings/org.eclipse.wst.common.component')
		project.afterEvaluate {
			component.deployName = project.name
			component.resources = project.sourceSets.main.allSource.srcDirs.collect {
				new WbResource("/", project.relativePath(it))
			}
		}
	}

	task forceWtpFacet(type: GenerateEclipseWtpFacet) {
		inputFile = project.file('.settings/org.eclipse.wst.common.project.facet.core.xml')
		outputFile = project.file('.settings/org.eclipse.wst.common.project.facet.core.xml')
		facet.facets = [
			new Facet(FacetType.fixed, "jst.java", null),
			new Facet(FacetType.fixed, "jst.web", null),
			new Facet(FacetType.installed, "jst.utility", "1.0"),
			new Facet(FacetType.installed, "jst.java", project.sourceCompatibility.toString())
		]
	}

	tasks.eclipse.doLast {
		forceWtpComponent.execute()
		forceWtpFacet.execute()
	}

	eclipse {
		project {
			buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
			buildCommand 'org.eclipse.wst.validation.validationbuilder'
			natures 'org.eclipse.wst.common.project.facet.core.nature'
			natures 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
			natures 'org.eclipse.jem.workbench.JavaEMFNature'
		}
	}
}

